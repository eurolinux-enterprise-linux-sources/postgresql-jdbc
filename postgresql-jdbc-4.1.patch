Back-patch upstream changes to add minimal JDBC4.1 support.


diff --git a/build.xml b/build.xml
index 263505a..87680e7 100644
--- a/build.xml
+++ b/build.xml
@@ -44,9 +44,15 @@
 	<equals arg1="${java.specification.version}" arg2="1.5"/>
     </condition>
     <condition property="jdbc4">
-      <or>
         <equals arg1="${java.specification.version}" arg2="1.6"/>
+    </condition>
+    <condition property="jdbc41">
         <equals arg1="${java.specification.version}" arg2="1.7"/>
+    </condition>
+    <condition property="jdbc4any">
+      <or>
+        <isset property="jdbc4" />
+	<isset property="jdbc41" />
       </or>
     </condition>
     <condition property="jdbc3any">
@@ -57,9 +63,8 @@
     </condition>
     <condition property="jdbc3plus">
       <or>
-        <isset property="jdbc3" />
-	<isset property="jdbc3g" />
-	<isset property="jdbc4" />
+        <isset property="jdbc3any" />
+	<isset property="jdbc4any" />
       </or>
     </condition>
 
@@ -68,7 +73,7 @@
         <or>
           <isset property="jdbc2" />
           <isset property="jdbc3any" />
-          <isset property="jdbc4" />
+          <isset property="jdbc4any" />
         </or>
       </not>
     </condition>
@@ -81,7 +86,7 @@
 
     <condition property="jdbc4tests">
       <and>
-        <isset property="jdbc4" />
+        <isset property="jdbc4any" />
         <isset property="junit" />
       </and>
     </condition>
@@ -160,8 +165,8 @@
        <exclude name="${package}/jdbc3g/Jdbc3g*.java" unless="jdbc3g" />
 
        <!-- jdbc4 subpackage -->
-       <include name="${package}/jdbc4/*.java" if="jdbc4" />
-       <exclude name="${package}/jdcb4/Jdbc4*.java" unless="jdbc4" />
+       <include name="${package}/jdbc4/*.java" if="jdbc4any" />
+       <exclude name="${package}/jdcb4/Jdbc4*.java" unless="jdbc4any" />
 
        <!-- ssl -->
        <include name="${package}/ssl/*.java" />
@@ -177,10 +182,12 @@
        <include name="${package}/ds/*.java" />
        <include name="${package}/ds/common/*.java" />
        <include name="${package}/ds/jdbc23/*.java" />
-       <include name="${package}/ds/jdbc4/*.java" if="jdbc4" />
+       <include name="${package}/ds/jdbc4/*.java" if="jdbc4any" />
 
        <!-- XA stuff -->
        <include name="${package}/xa/*.java" />
+       <include name="${package}/xa/jdbc3/*.java" />
+       <include name="${package}/xa/jdbc4/*.java" if="jdbc4any" />
 
     </javac>
   </target>
@@ -192,6 +199,8 @@
       <include name="${package}/ds/PGSimpleDataSource.java.in"/>
       <include name="${package}/ds/PGPoolingDataSource.java.in"/>
       <include name="${package}/ds/PGPooledConnection.java.in"/>
+      <include name="${package}/ds/PGConnectionPoolDataSource.java.in" />
+      <include name="${package}/xa/PGXADataSource.java.in" />
       <include name="build.properties"/>
       <include name="build.local.properties" />
       </srcfiles>
@@ -214,6 +223,9 @@
     <condition property="edition" value="JDBC4">
 	<equals arg1="${jdbc4}" arg2="true" />
     </condition>
+    <condition property="edition" value="JDBC4.1">
+	<equals arg1="${jdbc41}" arg2="true" />
+    </condition>
 
     <!-- determine the connection class -->
     <condition property="connectclass" value="org.postgresql.jdbc3.Jdbc3Connection">
@@ -223,37 +235,49 @@
         <equals arg1="${jdbc3g}" arg2="true"/>
     </condition>
     <condition property="connectclass" value="org.postgresql.jdbc4.Jdbc4Connection">
-	<equals arg1="${jdbc4}" arg2="true" />
+        <equals arg1="${jdbc4any}" arg2="true" />
+    </condition>
+
+    <condition property="notimplementedexception" value="java.sql.SQLException">
+        <equals arg1="${jdbc3any}" arg2="true" />
+    </condition>
+    <condition property="notimplementedexception" value="java.sql.SQLFeatureNotSupportedException">
+        <equals arg1="${jdbc4any}" arg2="true" />
     </condition>
 
     <condition property="simpledsclass" value="org.postgresql.ds.jdbc23.AbstractJdbc23SimpleDataSource">
-        <or>
-            <equals arg1="${jdbc3}" arg2="true" />
-            <equals arg1="${jdbc3g}" arg2="true" />
-        </or>
+        <equals arg1="${jdbc3any}" arg2="true" />
     </condition>
     <condition property="simpledsclass" value="org.postgresql.ds.jdbc4.AbstractJdbc4SimpleDataSource">
-        <equals arg1="${jdbc4}" arg2="true" />
+        <equals arg1="${jdbc4any}" arg2="true" />
     </condition>
 
     <condition property="poolingdsclass" value="org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource">
-        <or>
-            <equals arg1="${jdbc3}" arg2="true" />
-            <equals arg1="${jdbc3g}" arg2="true" />
-        </or>
+        <equals arg1="${jdbc3any}" arg2="true" />
     </condition>
     <condition property="poolingdsclass" value="org.postgresql.ds.jdbc4.AbstractJdbc4PoolingDataSource">
-        <equals arg1="${jdbc4}" arg2="true" />
+        <equals arg1="${jdbc4any}" arg2="true" />
 </condition>
 
     <condition property="pooledconnclass" value="org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection">
-        <or>
-            <equals arg1="${jdbc3}" arg2="true" />
-            <equals arg1="${jdbc3g}" arg2="true" />
-        </or>
+        <equals arg1="${jdbc3any}" arg2="true" />
     </condition>
     <condition property="pooledconnclass" value="org.postgresql.ds.jdbc4.AbstractJdbc4PooledConnection">
-        <equals arg1="${jdbc4}" arg2="true" />
+        <equals arg1="${jdbc4any}" arg2="true" />
+    </condition>
+
+    <condition property="connpooldsclass" value="org.postgresql.ds.jdbc23.AbstractJdbc23ConnectionPoolDataSource">
+        <equals arg1="${jdbc3any}" arg2="true" />
+    </condition>
+    <condition property="connpooldsclass" value="org.postgresql.ds.jdbc4.AbstractJdbc4ConnectionPoolDataSource">
+        <equals arg1="${jdbc4any}" arg2="true" />
+    </condition>
+
+    <condition property="xadsclass" value="org.postgresql.xa.jdbc3.AbstractJdbc3XADataSource">
+        <equals arg1="${jdbc3any}" arg2="true" />
+    </condition>
+    <condition property="xadsclass" value="org.postgresql.xa.jdbc4.AbstractJdbc4XADataSource">
+        <equals arg1="${jdbc4any}" arg2="true" />
     </condition>
 
     <!-- Some defaults -->
@@ -261,9 +285,12 @@
     <filter token="MINORVERSION" value="${minor}" />
     <filter token="VERSION" value="PostgreSQL ${fullversion} ${edition}" />
     <filter token="JDBCCONNECTCLASS" value="${connectclass}" />
+    <filter token="NOTIMPLEMENTEDEXCEPTION" value="${notimplementedexception}" />
+    <filter token="XA_DS_CLASS" value="${xadsclass}" />
     <filter token="POOLING_DS_CLASS" value="${poolingdsclass}" />
     <filter token="SIMPLE_DS_CLASS" value="${simpledsclass}" />
     <filter token="POOLED_CONN_CLASS" value="${pooledconnclass}" />
+    <filter token="CONN_POOL_DS_CLASS" value="${connpooldsclass}" />
     <filter token="DEF_PGPORT" value="${def_pgport}" />
 
      <fail unless="major" message="'major' undefined. Please follow the directions in README."/>
@@ -291,6 +318,14 @@
           overwrite="true"
           tofile="${package}/ds/PGPooledConnection.java"
           filtering="yes" />
+    <copy file="${package}/ds/PGConnectionPoolDataSource.java.in"
+          overwrite="true"
+          tofile="${package}/ds/PGConnectionPoolDataSource.java"
+          filtering="yes" />
+    <copy file="${package}/xa/PGXADataSource.java.in"
+          overwrite="true"
+          tofile="${package}/xa/PGXADataSource.java"
+          filtering="yes" />
 
   <echo message="Configured build for the ${edition} edition driver." />
   </target>
@@ -317,6 +352,8 @@
     <delete quiet="true" file="${package}/ds/PGPoolingDataSource.java" />
     <delete quiet="true" file="${package}/ds/PGSimpleDataSource.java" />
     <delete quiet="true" file="${package}/ds/PGPooledConnection.java" />
+    <delete quiet="true" file="${package}/ds/PGConnectionPoolDataSource.java" />
+    <delete quiet="true" file="${package}/xa/PGXADataSource.java" />
   </target>
 
   <!-- This compiles and executes the JUnit tests -->
@@ -428,8 +465,8 @@
         <include name="**/*.java"/>
 	<exclude name="jdbc3/Jdbc3*.java" unless="jdbc3" />
 	<exclude name="jdbc3g/Jdbc3g*.java" unless="jdbc3g" />
-	<exclude name="jdbc4/*.java" unless="jdbc4" />
-	<exclude name="ds/jdbc4/*.java" unless="jdbc4" />
+	<exclude name="jdbc4/*.java" unless="jdbc4any" />
+	<exclude name="ds/jdbc4/*.java" unless="jdbc4any" />
         <exclude name="test/**/*.java"/>
       </fileset>
     </javadoc>
diff --git a/org/postgresql/Driver.java.in b/org/postgresql/Driver.java.in
index 35c3bea..e81e080 100644
--- a/org/postgresql/Driver.java.in
+++ b/org/postgresql/Driver.java.in
@@ -746,10 +746,10 @@ public class Driver implements java.sql.Driver
      * @return PSQLException with a localized message giving the complete 
      *  description of the unimplemeted function
      */
-    public static SQLException notImplemented(Class callClass, String functionName)
+    public static @NOTIMPLEMENTEDEXCEPTION@ notImplemented(Class callClass, String functionName)
     {
-        return new PSQLException(GT.tr("Method {0} is not yet implemented.", callClass.getName() + "." + functionName),
-                                 PSQLState.NOT_IMPLEMENTED);
+        return new @NOTIMPLEMENTEDEXCEPTION@(GT.tr("Method {0} is not yet implemented.", callClass.getName() + "." + functionName),
+                                 PSQLState.NOT_IMPLEMENTED.getState());
     }
 
     /**
@@ -774,4 +774,9 @@ public class Driver implements java.sql.Driver
         }
     }
 
+    public java.util.logging.Logger getParentLogger() throws @NOTIMPLEMENTEDEXCEPTION@
+    {
+        throw notImplemented(this.getClass(), "getParentLogger()");
+    }
+
 }
diff --git a/org/postgresql/ds/PGConnectionPoolDataSource.java b/org/postgresql/ds/PGConnectionPoolDataSource.java
index 8b27c75..e69de29 100644
--- a/org/postgresql/ds/PGConnectionPoolDataSource.java
+++ b/org/postgresql/ds/PGConnectionPoolDataSource.java
@@ -1,104 +0,0 @@
-/*-------------------------------------------------------------------------
-*
-* Copyright (c) 2004-2008, PostgreSQL Global Development Group
-*
-*
-*-------------------------------------------------------------------------
-*/
-package org.postgresql.ds;
-
-import javax.sql.ConnectionPoolDataSource;
-import javax.sql.PooledConnection;
-import java.sql.SQLException;
-import java.io.Serializable;
-import java.io.ObjectOutputStream;
-import java.io.ObjectInputStream;
-import java.io.IOException;
-
-import org.postgresql.ds.common.*;
-
-/**
- * PostgreSQL implementation of ConnectionPoolDataSource.  The app server or
- * middleware vendor should provide a DataSource implementation that takes advantage
- * of this ConnectionPoolDataSource.  If not, you can use the PostgreSQL implementation
- * known as PoolingDataSource, but that should only be used if your server or middleware
- * vendor does not provide their own.  Why? The server may want to reuse the same
- * Connection across all EJBs requesting a Connection within the same Transaction, or
- * provide other similar advanced features.
- *
- * <p>In any case, in order to use this ConnectionPoolDataSource, you must set the property
- * databaseName.  The settings for serverName, portNumber, user, and password are
- * optional.  Note: these properties are declared in the superclass.</p>
- *
- * <p>This implementation supports JDK 1.3 and higher.</p>
- *
- * @author Aaron Mulder (ammulder@chariotsolutions.com)
- */
-public class PGConnectionPoolDataSource extends BaseDataSource implements Serializable, ConnectionPoolDataSource
-{
-    private boolean defaultAutoCommit = true;
-
-    /**
-     * Gets a description of this DataSource.
-     */
-    public String getDescription()
-    {
-        return "ConnectionPoolDataSource from " + org.postgresql.Driver.getVersion();
-    }
-
-    /**
-     * Gets a connection which may be pooled by the app server or middleware
-     * implementation of DataSource.
-     *
-     * @throws java.sql.SQLException
-     *     Occurs when the physical database connection cannot be established.
-     */
-    public PooledConnection getPooledConnection() throws SQLException
-    {
-        return new PGPooledConnection(getConnection(), defaultAutoCommit);
-    }
-
-    /**
-     * Gets a connection which may be pooled by the app server or middleware
-     * implementation of DataSource.
-     *
-     * @throws java.sql.SQLException
-     *     Occurs when the physical database connection cannot be established.
-     */
-    public PooledConnection getPooledConnection(String user, String password) throws SQLException
-    {
-        return new PGPooledConnection(getConnection(user, password), defaultAutoCommit);
-    }
-
-    /**
-     * Gets whether connections supplied by this pool will have autoCommit
-     * turned on by default.  The default value is <tt>false</tt>, so that
-     * autoCommit will be turned off by default.
-     */
-    public boolean isDefaultAutoCommit()
-    {
-        return defaultAutoCommit;
-    }
-
-    /**
-     * Sets whether connections supplied by this pool will have autoCommit
-     * turned on by default.  The default value is <tt>false</tt>, so that
-     * autoCommit will be turned off by default.
-     */
-    public void setDefaultAutoCommit(boolean defaultAutoCommit)
-    {
-        this.defaultAutoCommit = defaultAutoCommit;
-    }
-
-    private void writeObject(ObjectOutputStream out) throws IOException
-    {
-        writeBaseObject(out);
-        out.writeBoolean(defaultAutoCommit);
-    }
-
-    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException
-    {
-        readBaseObject(in);
-        defaultAutoCommit = in.readBoolean();
-    }
-}
diff --git a/org/postgresql/ds/PGConnectionPoolDataSource.java.in b/org/postgresql/ds/PGConnectionPoolDataSource.java.in
new file mode 100644
index 0000000..c4bd7b4
--- /dev/null
+++ b/org/postgresql/ds/PGConnectionPoolDataSource.java.in
@@ -0,0 +1,39 @@
+/*-------------------------------------------------------------------------
+*
+* Copyright (c) 2004-2008, PostgreSQL Global Development Group
+*
+* IDENTIFICATION
+*   $PostgreSQL: pgjdbc/org/postgresql/ds/PGConnectionPoolDataSource.java.in,v 1.1 2011/03/31 06:25:42 jurka Exp $
+*
+*-------------------------------------------------------------------------
+*/
+package org.postgresql.ds;
+
+import javax.sql.ConnectionPoolDataSource;
+
+import org.postgresql.ds.common.*;
+
+/**
+ * PostgreSQL implementation of ConnectionPoolDataSource.  The app server or
+ * middleware vendor should provide a DataSource implementation that takes advantage
+ * of this ConnectionPoolDataSource.  If not, you can use the PostgreSQL implementation
+ * known as PoolingDataSource, but that should only be used if your server or middleware
+ * vendor does not provide their own.  Why? The server may want to reuse the same
+ * Connection across all EJBs requesting a Connection within the same Transaction, or
+ * provide other similar advanced features.
+ *
+ * <p>In any case, in order to use this ConnectionPoolDataSource, you must set the property
+ * databaseName.  The settings for serverName, portNumber, user, and password are
+ * optional.  Note: these properties are declared in the superclass.</p>
+ *
+ * <p>This implementation supports JDK 1.3 and higher.</p>
+ *
+ * @author Aaron Mulder (ammulder@chariotsolutions.com)
+ */
+public class PGConnectionPoolDataSource
+    extends @CONN_POOL_DS_CLASS@
+    implements ConnectionPoolDataSource
+{
+
+}
+
diff --git a/org/postgresql/ds/jdbc23/AbstractJdbc23ConnectionPoolDataSource.java b/org/postgresql/ds/jdbc23/AbstractJdbc23ConnectionPoolDataSource.java
new file mode 100644
index 0000000..7b3ab12
--- /dev/null
+++ b/org/postgresql/ds/jdbc23/AbstractJdbc23ConnectionPoolDataSource.java
@@ -0,0 +1,107 @@
+/*-------------------------------------------------------------------------
+*
+* Copyright (c) 2004-2008, PostgreSQL Global Development Group
+*
+* IDENTIFICATION
+*   $PostgreSQL: pgjdbc/org/postgresql/ds/jdbc23/AbstractJdbc23ConnectionPoolDataSource.java,v 1.1 2011/03/31 06:25:42 jurka Exp $
+*
+*-------------------------------------------------------------------------
+*/
+package org.postgresql.ds.jdbc23;
+
+import javax.sql.PooledConnection;
+import java.sql.SQLException;
+import java.io.Serializable;
+import java.io.ObjectOutputStream;
+import java.io.ObjectInputStream;
+import java.io.IOException;
+
+import org.postgresql.ds.common.*;
+import org.postgresql.ds.PGPooledConnection;
+
+/**
+ * PostgreSQL implementation of ConnectionPoolDataSource.  The app server or
+ * middleware vendor should provide a DataSource implementation that takes advantage
+ * of this ConnectionPoolDataSource.  If not, you can use the PostgreSQL implementation
+ * known as PoolingDataSource, but that should only be used if your server or middleware
+ * vendor does not provide their own.  Why? The server may want to reuse the same
+ * Connection across all EJBs requesting a Connection within the same Transaction, or
+ * provide other similar advanced features.
+ *
+ * <p>In any case, in order to use this ConnectionPoolDataSource, you must set the property
+ * databaseName.  The settings for serverName, portNumber, user, and password are
+ * optional.  Note: these properties are declared in the superclass.</p>
+ *
+ * <p>This implementation supports JDK 1.3 and higher.</p>
+ *
+ * @author Aaron Mulder (ammulder@chariotsolutions.com)
+ */
+public class AbstractJdbc23ConnectionPoolDataSource extends BaseDataSource implements Serializable
+{
+    private boolean defaultAutoCommit = true;
+
+    /**
+     * Gets a description of this DataSource.
+     */
+    public String getDescription()
+    {
+        return "ConnectionPoolDataSource from " + org.postgresql.Driver.getVersion();
+    }
+
+    /**
+     * Gets a connection which may be pooled by the app server or middleware
+     * implementation of DataSource.
+     *
+     * @throws java.sql.SQLException
+     *     Occurs when the physical database connection cannot be established.
+     */
+    public PooledConnection getPooledConnection() throws SQLException
+    {
+        return new PGPooledConnection(getConnection(), defaultAutoCommit);
+    }
+
+    /**
+     * Gets a connection which may be pooled by the app server or middleware
+     * implementation of DataSource.
+     *
+     * @throws java.sql.SQLException
+     *     Occurs when the physical database connection cannot be established.
+     */
+    public PooledConnection getPooledConnection(String user, String password) throws SQLException
+    {
+        return new PGPooledConnection(getConnection(user, password), defaultAutoCommit);
+    }
+
+    /**
+     * Gets whether connections supplied by this pool will have autoCommit
+     * turned on by default.  The default value is <tt>false</tt>, so that
+     * autoCommit will be turned off by default.
+     */
+    public boolean isDefaultAutoCommit()
+    {
+        return defaultAutoCommit;
+    }
+
+    /**
+     * Sets whether connections supplied by this pool will have autoCommit
+     * turned on by default.  The default value is <tt>false</tt>, so that
+     * autoCommit will be turned off by default.
+     */
+    public void setDefaultAutoCommit(boolean defaultAutoCommit)
+    {
+        this.defaultAutoCommit = defaultAutoCommit;
+    }
+
+    private void writeObject(ObjectOutputStream out) throws IOException
+    {
+        writeBaseObject(out);
+        out.writeBoolean(defaultAutoCommit);
+    }
+
+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException
+    {
+        readBaseObject(in);
+        defaultAutoCommit = in.readBoolean();
+    }
+
+}
diff --git a/org/postgresql/ds/jdbc4/AbstractJdbc4ConnectionPoolDataSource.java b/org/postgresql/ds/jdbc4/AbstractJdbc4ConnectionPoolDataSource.java
new file mode 100644
index 0000000..97e2658
--- /dev/null
+++ b/org/postgresql/ds/jdbc4/AbstractJdbc4ConnectionPoolDataSource.java
@@ -0,0 +1,17 @@
+package org.postgresql.ds.jdbc4;
+
+import java.sql.SQLFeatureNotSupportedException;
+
+import org.postgresql.ds.jdbc23.AbstractJdbc23ConnectionPoolDataSource;
+
+public class AbstractJdbc4ConnectionPoolDataSource
+	extends AbstractJdbc23ConnectionPoolDataSource
+{
+
+    public java.util.logging.Logger getParentLogger() throws java.sql.SQLFeatureNotSupportedException
+    {
+        throw org.postgresql.Driver.notImplemented(this.getClass(), "getParentLogger()");
+    }
+
+}
+
diff --git a/org/postgresql/ds/jdbc4/AbstractJdbc4PooledConnection.java b/org/postgresql/ds/jdbc4/AbstractJdbc4PooledConnection.java
index c275278..07da355 100644
--- a/org/postgresql/ds/jdbc4/AbstractJdbc4PooledConnection.java
+++ b/org/postgresql/ds/jdbc4/AbstractJdbc4PooledConnection.java
@@ -8,6 +8,7 @@
 package org.postgresql.ds.jdbc4;
 
 import java.sql.Connection;
+import java.sql.SQLFeatureNotSupportedException;
 import javax.sql.StatementEventListener;
 import org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection;
 
@@ -27,4 +28,9 @@ public abstract class AbstractJdbc4PooledConnection extends AbstractJdbc23Pooled
     {
     }
 
+    public java.util.logging.Logger getParentLogger() throws SQLFeatureNotSupportedException
+    {
+        throw org.postgresql.Driver.notImplemented(this.getClass(), "getParentLogger()");
+    }
+
 }
diff --git a/org/postgresql/ds/jdbc4/AbstractJdbc4PoolingDataSource.java b/org/postgresql/ds/jdbc4/AbstractJdbc4PoolingDataSource.java
index 8c1c787..fcd0606 100644
--- a/org/postgresql/ds/jdbc4/AbstractJdbc4PoolingDataSource.java
+++ b/org/postgresql/ds/jdbc4/AbstractJdbc4PoolingDataSource.java
@@ -8,6 +8,7 @@
 package org.postgresql.ds.jdbc4;
 
 import java.sql.SQLException;
+import java.sql.SQLFeatureNotSupportedException;
 
 import org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource;
 
@@ -24,4 +25,9 @@ public abstract class AbstractJdbc4PoolingDataSource extends AbstractJdbc23Pooli
         throw org.postgresql.Driver.notImplemented(this.getClass(), "unwrap(Class<T>)");
     }
 
+    public java.util.logging.Logger getParentLogger() throws SQLFeatureNotSupportedException
+    {
+        throw org.postgresql.Driver.notImplemented(this.getClass(), "getParentLogger()");
+    }
+
 }
diff --git a/org/postgresql/ds/jdbc4/AbstractJdbc4SimpleDataSource.java b/org/postgresql/ds/jdbc4/AbstractJdbc4SimpleDataSource.java
index 4b5e073..944f2d3 100644
--- a/org/postgresql/ds/jdbc4/AbstractJdbc4SimpleDataSource.java
+++ b/org/postgresql/ds/jdbc4/AbstractJdbc4SimpleDataSource.java
@@ -8,6 +8,7 @@
 package org.postgresql.ds.jdbc4;
 
 import java.sql.SQLException;
+import java.sql.SQLFeatureNotSupportedException;
 
 import org.postgresql.ds.jdbc23.AbstractJdbc23SimpleDataSource;
 
@@ -23,4 +24,9 @@ public abstract class AbstractJdbc4SimpleDataSource extends AbstractJdbc23Simple
         throw org.postgresql.Driver.notImplemented(this.getClass(), "unwrap(Class<T>)");
     }
 
+    public java.util.logging.Logger getParentLogger() throws SQLFeatureNotSupportedException
+    {
+        throw org.postgresql.Driver.notImplemented(this.getClass(), "getParentLogger()");
+    }
+
 }
diff --git a/org/postgresql/jdbc4/AbstractJdbc4Connection.java b/org/postgresql/jdbc4/AbstractJdbc4Connection.java
index 5fe713c..8d04601 100644
--- a/org/postgresql/jdbc4/AbstractJdbc4Connection.java
+++ b/org/postgresql/jdbc4/AbstractJdbc4Connection.java
@@ -12,6 +12,7 @@ import java.util.Map;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Properties;
+import java.util.concurrent.Executor;
 
 import org.postgresql.core.Oid;
 import org.postgresql.core.TypeInfo;
@@ -150,5 +151,32 @@ abstract class AbstractJdbc4Connection extends org.postgresql.jdbc3g.AbstractJdb
         throw org.postgresql.Driver.notImplemented(this.getClass(), "unwrap(Class<T>)");
     }
 
+    public java.util.logging.Logger getParentLogger() throws SQLFeatureNotSupportedException
+    {
+        throw org.postgresql.Driver.notImplemented(this.getClass(), "getParentLogger()");
+    }
+
+    public void setSchema(String schema) throws SQLException
+    {
+        throw org.postgresql.Driver.notImplemented(this.getClass(), "setSchema(String)");
+    }
+
+    public String getSchema() throws SQLException
+    {
+        throw org.postgresql.Driver.notImplemented(this.getClass(), "getSchema()");
+    }
+
+    public void abort(Executor executor) throws SQLException
+    {
+        throw org.postgresql.Driver.notImplemented(this.getClass(), "abort(Executor)");
+    }
+
+    public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
+        throw org.postgresql.Driver.notImplemented(this.getClass(), "setNetworkTimeout(Executor, int)");
+    }
+
+    public int getNetworkTimeout() throws SQLException {
+        throw org.postgresql.Driver.notImplemented(this.getClass(), "getNetworkTimeout()");
+    }
 
 }
diff --git a/org/postgresql/jdbc4/AbstractJdbc4DatabaseMetaData.java b/org/postgresql/jdbc4/AbstractJdbc4DatabaseMetaData.java
index 6be438b..a8afc20 100644
--- a/org/postgresql/jdbc4/AbstractJdbc4DatabaseMetaData.java
+++ b/org/postgresql/jdbc4/AbstractJdbc4DatabaseMetaData.java
@@ -88,4 +88,13 @@ public abstract class AbstractJdbc4DatabaseMetaData extends org.postgresql.jdbc3
         return getColumns(4, catalog, schemaPattern, tableNamePattern, columnNamePattern);
     }
 
+    public ResultSet getPseudoColumns(String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern) throws SQLException
+    {
+        throw org.postgresql.Driver.notImplemented(this.getClass(), "getPseudoColumns(String, String, String, String)");
+    }
+
+    public boolean generatedKeyAlwaysReturned() throws SQLException {
+        return true;
+    }
+
 }
diff --git a/org/postgresql/jdbc4/AbstractJdbc4ResultSet.java b/org/postgresql/jdbc4/AbstractJdbc4ResultSet.java
index ad57d55..1a3a26c 100644
--- a/org/postgresql/jdbc4/AbstractJdbc4ResultSet.java
+++ b/org/postgresql/jdbc4/AbstractJdbc4ResultSet.java
@@ -296,6 +296,15 @@ abstract class AbstractJdbc4ResultSet extends org.postgresql.jdbc3g.AbstractJdbc
         return super.internalGetObject(columnIndex, field);
     }
 
+    public <T> T getObject(int columnIndex, Class<T> type) throws SQLException
+    {
+        throw org.postgresql.Driver.notImplemented(this.getClass(), "getObject(int, Class<T>)");
+    }
+
+    public <T> T getObject(String columnLabel, Class<T> type) throws SQLException
+    {
+        return getObject(findColumn(columnLabel), type);
+    }
 
 }
 
diff --git a/org/postgresql/jdbc4/AbstractJdbc4Statement.java b/org/postgresql/jdbc4/AbstractJdbc4Statement.java
index d0b875b..4ad074a 100644
--- a/org/postgresql/jdbc4/AbstractJdbc4Statement.java
+++ b/org/postgresql/jdbc4/AbstractJdbc4Statement.java
@@ -365,4 +365,29 @@ abstract class AbstractJdbc4Statement extends org.postgresql.jdbc3g.AbstractJdbc
         throw org.postgresql.Driver.notImplemented(this.getClass(), "unwrap(Class<T>)");
     }
 
+    public java.util.logging.Logger getParentLogger() throws SQLFeatureNotSupportedException
+    {
+        throw org.postgresql.Driver.notImplemented(this.getClass(), "getParentLogger()");
+    }
+
+    public void closeOnCompletion() throws SQLException
+    {
+        throw org.postgresql.Driver.notImplemented(this.getClass(), "closeOnCompletion()");
+    }
+
+    public boolean isCloseOnCompletion() throws SQLException
+    {
+        throw org.postgresql.Driver.notImplemented(this.getClass(), "isCloseOnCompletion()");
+    }
+
+    public <T> T getObject(int parameterIndex, Class<T> type) throws SQLException
+    {
+        throw org.postgresql.Driver.notImplemented(this.getClass(), "getObject(int, Class<T>)");
+    }
+
+    public <T> T getObject(String parameterName, Class<T> type) throws SQLException
+    {
+        throw org.postgresql.Driver.notImplemented(this.getClass(), "getObject(String, Class<T>)");
+    }
+
 }
diff --git a/org/postgresql/xa/PGXAConnection.java b/org/postgresql/xa/PGXAConnection.java
index a53b543..b8d1351 100644
--- a/org/postgresql/xa/PGXAConnection.java
+++ b/org/postgresql/xa/PGXAConnection.java
@@ -76,7 +76,7 @@ public class PGXAConnection extends PGPooledConnection implements XAConnection,
         logger.debug("XAResource " + Integer.toHexString(this.hashCode()) + ": " + s);
     }
 
-    PGXAConnection(BaseConnection conn) throws SQLException
+    public PGXAConnection(BaseConnection conn) throws SQLException
     {
         super(conn, true, true);
         this.conn = conn;
diff --git a/org/postgresql/xa/PGXADataSource.java.in b/org/postgresql/xa/PGXADataSource.java.in
new file mode 100644
index 0000000..10e89c8
--- /dev/null
+++ b/org/postgresql/xa/PGXADataSource.java.in
@@ -0,0 +1,15 @@
+package org.postgresql.xa;
+
+import javax.sql.XADataSource;
+
+/**
+ * XA-enabled DataSource implementation.
+ *
+ * @author Heikki Linnakangas (heikki.linnakangas@iki.fi)
+ */
+public class PGXADataSource
+    extends @XA_DS_CLASS@
+    implements XADataSource
+{
+}
+
diff --git a/org/postgresql/xa/jdbc3/AbstractJdbc3XADataSource.java b/org/postgresql/xa/jdbc3/AbstractJdbc3XADataSource.java
new file mode 100644
index 0000000..78fef9d
--- /dev/null
+++ b/org/postgresql/xa/jdbc3/AbstractJdbc3XADataSource.java
@@ -0,0 +1,65 @@
+package org.postgresql.xa.jdbc3;
+
+import java.sql.Connection;
+import java.sql.SQLException;
+
+import javax.naming.Referenceable;
+import javax.naming.Reference;
+import javax.sql.XAConnection;
+
+import org.postgresql.xa.*;
+
+import org.postgresql.core.BaseConnection;
+import org.postgresql.ds.common.BaseDataSource;
+
+/**
+ * XA-enabled DataSource implementation.
+ *
+ * @author Heikki Linnakangas (heikki.linnakangas@iki.fi)
+ */
+public class AbstractJdbc3XADataSource extends BaseDataSource implements Referenceable
+{
+    /**
+     * Gets a connection to the PostgreSQL database.  The database is identified by the
+     * DataSource properties serverName, databaseName, and portNumber. The user to
+     * connect as is identified by the DataSource properties user and password.
+     *
+     * @return A valid database connection.
+     * @throws SQLException
+     *     Occurs when the database connection cannot be established.
+     */
+    public XAConnection getXAConnection() throws SQLException
+    {
+        return getXAConnection(getUser(), getPassword());
+    }
+
+    /**
+     * Gets a XA-enabled connection to the PostgreSQL database.  The database is identified by the
+     * DataSource properties serverName, databaseName, and portNumber. The user to
+     * connect as is identified by the arguments user and password, which override
+     * the DataSource properties by the same name.
+     *
+     * @return A valid database connection.
+     * @throws SQLException
+     *     Occurs when the database connection cannot be established.
+     */
+    public XAConnection getXAConnection(String user, String password) throws SQLException
+    {
+        Connection con = super.getConnection(user, password);
+        return new PGXAConnection((BaseConnection) con);
+    }
+
+    public String getDescription() {
+        return "JDBC3 XA-enabled DataSource from " + org.postgresql.Driver.getVersion();
+    }
+
+    /**
+     * Generates a reference using the appropriate object factory.
+     */
+    protected Reference createReference() {
+        return new Reference(
+                   getClass().getName(),
+                   PGXADataSourceFactory.class.getName(),
+                   null);
+    }
+}
diff --git a/org/postgresql/xa/jdbc4/AbstractJdbc4XADataSource.java b/org/postgresql/xa/jdbc4/AbstractJdbc4XADataSource.java
new file mode 100644
index 0000000..d45230b
--- /dev/null
+++ b/org/postgresql/xa/jdbc4/AbstractJdbc4XADataSource.java
@@ -0,0 +1,17 @@
+package org.postgresql.xa.jdbc4;
+
+import java.sql.SQLFeatureNotSupportedException;
+
+import org.postgresql.xa.jdbc3.AbstractJdbc3XADataSource;
+
+public class AbstractJdbc4XADataSource
+    extends AbstractJdbc3XADataSource
+{
+
+    public java.util.logging.Logger getParentLogger() throws SQLFeatureNotSupportedException
+    {
+        throw org.postgresql.Driver.notImplemented(this.getClass(), "getParentLogger()");
+    }
+
+}
+
